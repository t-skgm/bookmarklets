javascript:(async()=>{const t=(c,b,d)=>b.split(".").reduce((e,n)=>e&&e[n],c)??d,p=(c,b)=>{c=new Blob([c],{type:"text/plain"});const d=document.createElement("a");d.href=URL.createObjectURL(c);d.download=b;d.click()},u=new DOMParser,v=async c=>{c=await fetch(c).then(b=>b.text());c=u.parseFromString(c,"text/html").querySelector('script[type="application/ld+json"]').textContent;return JSON.parse(c)};try{console.log("[marklet] script starts");const c=document.querySelector('script[type="application/ld+json"]').textContent,b=JSON.parse(c),d=b.track.itemListElement.map(a=>`${a.position}. ${a.item.name}`);var h=b.byArtist.name,k=b.name,w=b["@id"],x=d.join("\n")??"-",y=b.description??"-",z=b.creditText??"-",A=(new Date(b.datePublished)).toISOString().slice(0,10),B=b.copyrightNotice??"-",C=b.keywords.join(", ")??"-",D=(a=>`[name]\n${a.name}\n\n`+`[location]\n${a.foundingLocation.name}\n\n`+"[description]\n"+a.description+"\n\n[website]\n"+a.mainEntityOfPage.map(l=>`* ${l.name} (${l.url})\n`))(b.publisher);p(h+"\n"+k+"\n"+w+"\n\n<Track list>\n"+x+"\n\n<Description>\n"+y+"\n\n<Credits>\n"+z+"\n\n<Published>\n"+A+"\n\n<Lisence>\n"+B+"\n\n<Tags>\n"+C+"\n\n<Publisher>\n"+D,`${h} - ${k}.txt`);const e=b.track.itemListElement.map(a=>({url:a.item["@id"],title:`${a.position}. ${a.item.name}`,lyrics:t(a,"item.recordingOf.lyrics.text")})),n=document.querySelectorAll(".info_link"),q=Array.from(n).filter(a=>a.textContent.includes("info")).map(a=>`${location.origin}${a.querySelector("a").getAttribute("href")}`);if(e.some(a=>void 0!==a.lyrics)||0!==q.length){console.log("[marklet] this album has some track info. let's download it");const a=await Promise.all(e.map(async f=>{let m=f.title+"\n";if(q.includes(f.url)){var g=await v(f.url);const r=g.description;g=g.creditText;r&&(m+="<Description>\n"+r+"\n");g&&(m+="<Credit>\n"+g+"\n")}f.lyrics&&(m+="<Lyrics>\n"+f.lyrics);return m})),l=h+" - "+k+"\n\n"+a.join("\n\n");p(l,`${h} - ${k} Tracks.txt`)}console.log("[marklet] script finished!")}catch(c){alert("[marklet] Error!",c.message)}})();