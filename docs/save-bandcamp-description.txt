javascript:(async()=>{const v=(c,b,e)=>b.split(".").reduce((k,p)=>k&&k[p],c)??e,q=(c,b)=>{c=new Blob([c],{type:"text/plain"});const e=document.createElement("a");e.href=URL.createObjectURL(c);e.download=b;e.click()},w=new DOMParser,x=async c=>{c=await fetch(c).then(b=>b.text());c=w.parseFromString(c,"text/html").querySelector('script[type="application/ld+json"]').textContent;return JSON.parse(c)};try{console.log("[marklet] script starts");const c=document.querySelector('script[type="application/ld+json"]').textContent,b=JSON.parse(c),e=b.track.itemListElement.map(a=>`${a.position}. ${a.item.name}`),k=null!=document.querySelector(".lyricsRow");var l=b.byArtist.name,m=b.name,g=b["@id"],y=e.join("\n")??"-",z=b.description??"-",A=b.creditText??"-",B=(new Date(b.datePublished)).toISOString().slice(0,10),C=b.copyrightNotice??"-",D=b.keywords?b.keywords.join(", ")??"-":"-",E=(a=>{let d=`[name]\n${a.name}`;a.foundingLocation&&(d=d+"\n\n[location]\n"+`${a.foundingLocation.name}`);a.description&&(d=d+"\n\n[description]\n"+a.description);a.mainEntityOfPage&&(d=d+"\n\n[website]\n"+a.mainEntityOfPage.map(f=>`* ${f.name} (${f.url})\n`));return d})(b.publisher);const p=Array.from(document.querySelectorAll(".lyricsRow")).map(a=>{const d=Number(a.id.replace("lyrics_row_",""));a=a.textContent.trim();return`${e[d-1]}\n${a}`});g=l+"\n"+m+"\n"+g+"\n\n<Track list>\n"+y+"\n\n<Description>\n"+z+"\n\n<Credits>\n"+A+"\n\n<Published>\n"+B+"\n\n<Lisence>\n"+C+"\n\n<Tags>\n"+D+"\n\n<Publisher>\n"+E;k&&(g=g+"\n\n<Lyrics (In-page)>\n"+p.join("\n\n"));q(g,`${l} - ${m}.txt`);const r=b.track.itemListElement.map(a=>({url:a.item["@id"],title:`${a.position}. ${a.item.name}`,lyrics:v(a,"item.recordingOf.lyrics.text")})),F=document.querySelectorAll(".info_link"),t=Array.from(F).filter(a=>a.textContent.includes("info")).map(a=>`${location.origin}${a.querySelector("a").getAttribute("href")}`);if(r.some(a=>void 0!==a.lyrics)||0!==t.length){console.log("[marklet] this album has some track info. let's download it");const a=await Promise.all(r.map(async f=>{let n=f.title+"\n";if(t.includes(f.url)){var h=await x(f.url);const u=h.description;h=h.creditText;u&&(n+="<Description>\n"+u+"\n");h&&(n+="<Credit>\n"+h+"\n")}f.lyrics&&(n+="<Lyrics>\n"+f.lyrics);return n})),d=l+" - "+m+"\n\n"+a.join("\n\n");q(d,`${l} - ${m} Tracks.txt`)}console.log("[marklet] script finished!")}catch(c){alert("[marklet] Error!",c.message)}})();