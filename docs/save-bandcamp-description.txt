javascript:(async()=>{const r=(b,a,d)=>a.split(".").reduce((e,m)=>e&&e[m],b)??d,n=(b,a)=>{b=new Blob([b],{type:"text/plan"});const d=document.createElement("a");d.href=URL.createObjectURL(b);d.download=a;d.click()},t=new DOMParser,u=async b=>{b=await fetch(b).then(a=>a.text());b=t.parseFromString(b,"text/html").querySelector('script[type="application/ld+json"]').textContent;return JSON.parse(b)};try{console.log("[marklet] script starts");const b=document.querySelector('script[type="application/ld+json"]').textContent,a=JSON.parse(b),d=a.track.itemListElement.map(c=>`${c.position}. ${c.item.name}`);var h=a.byArtist.name,k=a.name,v=a["@id"],w=d.join("\n")??"-",x=a.description??"-",y=a.creditText??"-",z=(new Date(a.datePublished)).toISOString().slice(0,10),A=a.copyrightNotice??"-",B=a.keywords.join(", ")??"-";n(h+"\n"+k+"\n"+v+"\n\n<Track list>\n"+w+"\n\n<Description>\n"+x+"\n\n<Credits>\n"+y+"\n\n<Published>\n"+z+"\n\n<Lisence>\n"+A+"\n\n<Tags>\n"+B,`${h} - ${k}.txt`);const e=a.track.itemListElement.map(c=>({url:c.item["@id"],title:`${c.position}. ${c.item.name}`,lyrics:r(c,"item.recordingOf.lyrics.text")})),m=document.querySelectorAll(".info_link"),p=Array.from(m).filter(c=>c.textContent.includes("info")).map(c=>`${location.origin}${c.querySelector("a").getAttribute("href")}`);if(e.some(c=>void 0!==c.lyrics)||0!==p.length){console.log("[marklet] this album has some track info. let's download it");const c=await Promise.all(e.map(async f=>{let l=f.title+"\n";if(p.includes(f.url)){var g=await u(f.url);const q=g.description;g=g.creditText;q&&(l+="<Description>\n"+q+"\n");g&&(l+="<Credit>\n"+g+"\n")}f.lyrics&&(l+="<Lyrics>\n"+f.lyrics);return l})),C=h+" - "+k+"\n\n"+c.join("\n\n");n(C,`${h} - ${k} Tracks.txt`)}console.log("[marklet] script finished!")}catch(b){alert("[marklet] Error!",b.message)}})();