javascript:(async()=>{const w=(a,d,e)=>d.split(".").reduce((k,l)=>k&&k[l],a)??e,q=(a,d)=>{a=new Blob([a],{type:"text/plain"});const e=document.createElement("a");e.href=URL.createObjectURL(a);e.download=d;e.click()},x=new DOMParser,y=async a=>{a=await fetch(a).then(d=>d.text());a=x.parseFromString(a,"text/html").querySelector('script[type="application/ld+json"]').textContent;return JSON.parse(a)};try{if(console.log("[marklet] script starts"),"Bandcamp"!==document.querySelector('meta[name="generator"]')?.content)alert("Download failed: this page is not generated by Bandcamp");else{var t=a=>{let d=`[name]\n${a.name}`;a.foundingLocation&&(d=d+"\n\n[location]\n"+`${a.foundingLocation.name}`);a.description&&(d=d+"\n\n[description]\n"+a.description);a.mainEntityOfPage&&(d=d+"\n\n[website]\n"+a.mainEntityOfPage.map(e=>`* ${e.name} (${e.url})`).join("\n"));return d},z=document.querySelector('script[type="application/ld+json"]').textContent,b=JSON.parse(z);if(null!=b.albumReleaseType){const a=b.track.itemListElement.map(c=>`${c.position}. ${c.item.name}`);var m=b.byArtist.name,n=b.name,A=b["@id"],B=a.join("\n")??"-",C=b.description??"-",D=b.creditText??"-",E=(new Date(b.datePublished)).toISOString().slice(0,10),F=b.copyrightNotice??"-",G=b.keywords?b.keywords.join(", ")??"-":"-",H=t(b.publisher);const d=Array.from(document.querySelectorAll(".lyricsRow")).map(c=>{const r=Number(c.id.replace("lyrics_row_",""));c=c.textContent.trim();return`${a[r-1]}\n${c}`});var f=m+"\n"+n+"\n"+A+"\n\n<Track list>\n"+B+"\n\n<Description>\n"+C+"\n\n<Credits>\n"+D+"\n\n<Published>\n"+E+"\n\n<Lisence>\n"+F+"\n\n<Tags>\n"+G+"\n\n<Publisher>\n"+H;null!=document.querySelector(".lyricsRow")&&(f+="\n\n<Lyrics (In-page)>\n"+d.join("\n\n"));q(f,`${m} - ${n}.txt`);const e=b.track.itemListElement.map(c=>({url:c.item["@id"],title:`${c.position}. ${c.item.name}`,lyrics:w(c,"item.recordingOf.lyrics.text")})),k=document.querySelectorAll(".info_link"),l=Array.from(k).filter(c=>c.textContent.includes("info")).map(c=>`${location.origin}${c.querySelector("a").getAttribute("href")}`);if(e.some(c=>void 0!==c.lyrics)||0!==l.length){console.log("[marklet] this album has some track info. let's download it");const c=await Promise.all(e.map(async g=>{let p=g.title+"\n";if(l.includes(g.url)){var h=await y(g.url);const u=h.description;h=h.creditText;u&&(p+="<Description>\n"+u+"\n");h&&(p+="<Credit>\n"+h+"\n")}g.lyrics&&(p+="<Lyrics>\n"+g.lyrics);return p})),r=m+" - "+n+"\n\n"+c.join("\n\n");q(r,`${m} - ${n} Tracks.txt`)}}else{f=b.byArtist.name;var v=b.name,I=b["@id"],J=b.description??"-",K=b.creditText??"-",L=(new Date(b.datePublished)).toISOString().slice(0,10),M=b.copyrightNotice??"-",N=t(b.publisher);const a=document.querySelector(".lyricsText").textContent;b=f+"\n"+v+"\n"+I+"\n\n<Description>\n"+J+"\n\n<Credits>\n"+K+"\n\n";if(null!=a){const d=a.split("\n").map(e=>e.trim()).join("\n");b+="<Lyrics>\n"+d+"\n\n"}q(b+("<Published>\n"+L+"\n\n<Lisence>\n"+M+"\n\n<Publisher>\n"+N),`${f} - ${v}.txt`)}console.log("[marklet] script finished!")}}catch(a){alert("[marklet] Error!",a.message)}})();