javascript:(async()=>{const x=(a,d,e)=>d.split(".").reduce((k,l)=>k&&k[l],a)??e;var m=(a=100)=>new Promise(d=>setTimeout(d,a));const r=(a,d)=>{a=new Blob([a],{type:"text/plain"});const e=document.createElement("a");e.href=URL.createObjectURL(a);e.download=d;e.click()},y=new DOMParser,z=async a=>{a=await fetch(a).then(d=>d.text());a=y.parseFromString(a,"text/html").querySelector('script[type="application/ld+json"]').textContent;return JSON.parse(a)};try{if(console.log("[marklet] script starts"),"Bandcamp"!==document.querySelector('meta[name="generator"]')?.content)alert("Download failed: this page is not generated by Bandcamp");else{var u=a=>{let d=`[name]\n${a.name}`;a.foundingLocation&&(d=d+"\n\n[location]\n"+`${a.foundingLocation.name}`);a.description&&(d=d+"\n\n[description]\n"+a.description);a.mainEntityOfPage&&(d=d+"\n\n[website]\n"+a.mainEntityOfPage.map(e=>`* ${e.name} (${e.url})`).join("\n"));return d},A=document.querySelector('script[type="application/ld+json"]').textContent,b=JSON.parse(A);if(null!=b.albumReleaseType){const a=b.track.itemListElement.map(c=>`${c.position}. ${c.item.name}`);var n=b.byArtist.name,p=b.name,B=b["@id"],C=a.join("\n")??"-",D=b.description??"-",E=b.creditText??"-",F=(new Date(b.datePublished)).toISOString().slice(0,10),G=b.copyrightNotice??"-",H=b.keywords?b.keywords.join(", ")??"-":"-",I=u(b.publisher);const d=Array.from(document.querySelectorAll(".lyricsRow")).map(c=>{const t=Number(c.id.replace("lyrics_row_",""));c=c.textContent.trim();return`${a[t-1]}\n${c}`});var f=n+"\n"+p+"\n"+B+"\n\n<Track list>\n"+C+"\n\n<Description>\n"+D+"\n\n<Credits>\n"+E+"\n\n<Published>\n"+F+"\n\n<Lisence>\n"+G+"\n\n<Tags>\n"+H+"\n\n<Publisher>\n"+I;null!=document.querySelector(".lyricsRow")&&(f+="\n\n<Lyrics (In-page)>\n"+d.join("\n\n"));r(f,`${n} - ${p}.txt`);await m();const e=b.track.itemListElement.map(c=>({url:c.item["@id"],title:`${c.position}. ${c.item.name}`,lyrics:x(c,"item.recordingOf.lyrics.text")})),k=document.querySelectorAll(".info_link"),l=Array.from(k).filter(c=>c.textContent.includes("info")).map(c=>`${location.origin}${c.querySelector("a").getAttribute("href")}`);if(e.some(c=>void 0!==c.lyrics)||0!==l.length){console.log("[marklet] this album has some track info. let's download it");const c=await Promise.all(e.map(async g=>{let q=g.title+"\n";if(l.includes(g.url)){var h=await z(g.url);const v=h.description;h=h.creditText;v&&(q+="<Description>\n"+v+"\n");h&&(q+="<Credit>\n"+h+"\n")}g.lyrics&&(q+="<Lyrics>\n"+g.lyrics);return q})),t=n+" - "+p+"\n\n"+c.join("\n\n");r(t,`${n} - ${p} Tracks.txt`)}}else{f=b.byArtist.name;var w=b.name,J=b["@id"],K=b.description??"-",L=b.creditText??"-",M=(new Date(b.datePublished)).toISOString().slice(0,10),N=b.copyrightNotice??"-",O=u(b.publisher);const a=document.querySelector(".lyricsText").textContent;m=f+"\n"+w+"\n"+J+"\n\n<Description>\n"+K+"\n\n<Credits>\n"+L+"\n\n";if(null!=a){const d=a.split("\n").map(e=>e.trim()).join("\n");m+="<Lyrics>\n"+d+"\n\n"}r(m+("<Published>\n"+M+"\n\n<Lisence>\n"+N+"\n\n<Publisher>\n"+O),`${f} - ${w}.txt`)}console.log("[marklet] script finished!")}}catch(a){alert("[marklet] Error!",a.message)}})();