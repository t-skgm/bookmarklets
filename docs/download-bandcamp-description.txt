javascript:(async()=>{const r=(a,b,c)=>b.split(".").reduce((e,f)=>e&&e[f],a)??c,l=(a,b)=>{a=new Blob([a],{type:"text/plain"});const c=document.createElement("a");c.href=URL.createObjectURL(a);c.download=b;c.click()},t=new DOMParser,u=async a=>{a=await fetch(a).then(b=>b.text());a=t.parseFromString(a,"text/html").querySelector('script[type="application/ld+json"]').textContent;return JSON.parse(a)};try{if(console.log("[marklet] script starts"),"Bandcamp"!==document.querySelector('meta[name="generator"]')?.content)alert("Download failed: this page is not generated by Bandcamp");else{var g=document.querySelector('script[type="application/ld+json"]').textContent,d=JSON.parse(g),m=d.track.itemListElement.map(a=>`${a.position}. ${a.item.name}`),v=null!=document.querySelector(".lyricsRow"),h=d.byArtist.name,k=d.name,w=d["@id"],x=m.join("\n")??"-",y=d.description??"-",z=d.creditText??"-",A=(new Date(d.datePublished)).toISOString().slice(0,10),B=d.copyrightNotice??"-",C=d.keywords?d.keywords.join(", ")??"-":"-",D=(a=>{let b=`[name]\n${a.name}`;a.foundingLocation&&(b=b+"\n\n[location]\n"+`${a.foundingLocation.name}`);a.description&&(b=b+"\n\n[description]\n"+a.description);a.mainEntityOfPage&&(b=b+"\n\n[website]\n"+a.mainEntityOfPage.map(c=>`* ${c.name} (${c.url})\n`));return b})(d.publisher),E=Array.from(document.querySelectorAll(".lyricsRow")).map(a=>{const b=Number(a.id.replace("lyrics_row_",""));a=a.textContent.trim();return`${m[b-1]}\n${a}`});g=h+"\n"+k+"\n"+w+"\n\n<Track list>\n"+x+"\n\n<Description>\n"+y+"\n\n<Credits>\n"+z+"\n\n<Published>\n"+A+"\n\n<Lisence>\n"+B+"\n\n<Tags>\n"+C+"\n\n<Publisher>\n"+D;v&&(g=g+"\n\n<Lyrics (In-page)>\n"+E.join("\n\n"));l(g,`${h} - ${k}.txt`);var n=d.track.itemListElement.map(a=>({url:a.item["@id"],title:`${a.position}. ${a.item.name}`,lyrics:r(a,"item.recordingOf.lyrics.text")})),F=document.querySelectorAll(".info_link"),p=Array.from(F).filter(a=>a.textContent.includes("info")).map(a=>`${location.origin}${a.querySelector("a").getAttribute("href")}`);if(n.some(a=>void 0!==a.lyrics)||0!==p.length){console.log("[marklet] this album has some track info. let's download it");const a=await Promise.all(n.map(async c=>{let e=c.title+"\n";if(p.includes(c.url)){var f=await u(c.url);const q=f.description;f=f.creditText;q&&(e+="<Description>\n"+q+"\n");f&&(e+="<Credit>\n"+f+"\n")}c.lyrics&&(e+="<Lyrics>\n"+c.lyrics);return e})),b=h+" - "+k+"\n\n"+a.join("\n\n");l(b,`${h} - ${k} Tracks.txt`)}console.log("[marklet] script finished!")}}catch(a){alert("[marklet] Error!",a.message)}})();